"""
Gravity bounce using Vectors. 

This version of the Gravity Bounce program uses Pygame's Vector2 class to handle
the player's position and velocity. This makes the code more readable and
understandable, and makes it easier to add more complex features to the game.


"""
import pygame 
from dataclasses import dataclass


class Colors:
    """Constants for Colors"""
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    RED = (255, 0, 0)
    PLAYER_COLOR = RED
    BACKGROUND_COLOR = WHITE


@dataclass
class GameSettings:
    """Settings for the game"""
    width: int = 500
    height: int = 500
    gravity: float = 0.3
    player_start_x: int = 100
    player_start_y: int = 100
    player_v_y: float = 4  # Initial y velocity
    player_v_x: float = 0  # Initial x velocity
    player_width: int = 20
    player_height: int = 20
    player_jump_velocity: float = 15
    frame_rate: int = 15


class Game:
    """Main object for the top level of the game. Holds the main loop and other
    update, drawing and collision methods that operate on multiple other
    objects, like the player and obstacles."""
    
    def __init__(self, settings: GameSettings):
        pygame.init()

        self.settings = settings
        self.running = True

        self.screen = pygame.display.set_mode((self.settings.width, self.settings.height))
        self.clock = pygame.time.Clock()

        # Turn Gravity into a vector

    def run(self):
        """Main game loop"""

        player = Player(self)
        running = True
    
        pygame.key.set_repeat(50, 50)
    
        key_limit = 0
        while running:
            key_limit += 1
        
        self.screen.fill(settings.BACKGROUND_COLOR)
        
        keys = pygame.key.get_pressed()
        
        if key_limit%3 == 0: # Limit frequency of key presses so the user can set exact angles
            if keys[pygame.K_LEFT]:
                player.direction_vector = player.direction_vector.rotate(-settings.ANGLE_CHANGE)
            elif keys[pygame.K_RIGHT]:
                player.direction_vector = player.direction_vector.rotate(settings.ANGLE_CHANGE)
                
        if keys[pygame.K_UP]:
            player.direction_vector.scale_to_length(player.direction_vector.length() + settings.LENGTH_CHANGE)
        elif keys[pygame.K_DOWN]:
            player.direction_vector.scale_to_length(player.direction_vector.length() - settings.LENGTH_CHANGE)
        elif keys[pygame.K_SPACE]:
            player.move()
                

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                
        # Draw the player and the direction vector
        player.draw()

        pygame.draw.circle(self.screen, Colors.RED, (250, 250), 70, width=0, draw_top_right=True, draw_top_left=True, draw_bottom_left=True, draw_bottom_right=True)


class Player:
    """Player class, just a bouncing rectangle"""

    def __init__(self, game: Game):
        self.game = game
        self.settings = self.game.settings

        self.width = settings.player_width
        self.height = settings.player_height
    
        # Vector for our jump velocity, which is just up
        self.v_jump = pygame.Vector2(0, -settings.player_jump_velocity)

        # Player position
        self.pos = pygame.Vector2(settings.player_start_x, 
                                  settings.player_start_y if settings.player_start_y is not None else settings.height - self.height)
        
        # Player's velocity
        self.vel = pygame.Vector2(settings.player_v_x, settings.player_v_y)  # Velocity vector

        self.gravity = pygame.Vector2(0, self.settings.gravity)

    def draw(self, show_line=True):
        """Draws the player and the direction vector on the screen."""
        pygame.draw.rect(self.screen, settings.PLAYER_COLOR, (self.position.x - settings.PLAYER_SIZE // 2, self.position.y - settings.PLAYER_SIZE // 2, settings.PLAYER_SIZE, settings.PLAYER_SIZE))
        
        # The end position of the direction vector is the player's position plus the direction vector
        end_position = self.position + self.direction_vector
        
        if show_line:
            pygame.draw.line(self.screen, settings.BLACK, self.position, end_position, 2)

    def move(self):
        """Moves the player in the direction of the current angle."""
        
        
        init_position = self.position # Save the initial position for the animation
        
        # Calculate the final position after moving. Its just addition!
        final_position = self.position + self.direction_vector
        
        # The rest is just for animation
        length = self.direction_vector.length()
        N = int(length // 3)
        step = (final_position - self.position) / N
       
        for i in range(N):
            self.position += step
            self.screen.fill(settings.BACKGROUND_COLOR)
            self.draw(show_line=False)
            pygame.draw.line(self.screen, settings.LINE_COLOR, init_position, final_position, 2)
            pygame.display.flip()
            self.clock.tick(settings.FPS)

    # Direction functions. IMPORTANT! Using these functions isn't really
    # necessary, but it makes the code more readable. You could just use
    # self.vel.x < 0, but writing "self.going_left()" is a lot easier to read and
    # understand, it makes the code self-documenting. 

    def draw(self, screen):
        #print(self.pos.x, self.pos.y, self.width, self.height)
        pygame.draw.rect(screen, Colors.WHITE, (self.pos.x, self.pos.y, self.width, self.height))


settings = GameSettings()
game = Game(settings)
game.run()
pygame.quit()

